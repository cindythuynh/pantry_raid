'use client';
import { useState, useEffect } from 'react';
import { collection, getDocs, addDoc, deleteDoc, doc } from 'firebase/firestore';
import { db } from '../firebase/firebase.js';
import { auth } from '../firebase/firebase.js';
import { onAuthStateChanged } from 'firebase/auth';
import { ThemeProvider } from '@mui/material/styles';
import { AppBar, Toolbar, Typography, Button, Box, Container, TextField, List, ListItem, ListItemText, Divider } from '@mui/material';
import Link from 'next/link';
import Head from 'next/head';
import theme from './theme.js';
import React from 'react';

function Inventory() {
  const [data, setData] = useState([]);
  const [newItem, setNewItem] = useState('');
  const [newAmount, setNewAmount] = useState('');
  const [user, setUser] = useState(null);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setUser(user);
        fetchData(user.uid); // Fetch data only if user is authenticated
      } else {
        setUser(null);
        setData([]); // Clear inventory data if user logs out
      }
    });

    return () => unsubscribe();
  }, []);

  const fetchData = async (uid) => {
    try {
      const userPantryRef = collection(db, "pantry", uid, "items"); // User-specific subcollection
      const querySnapshot = await getDocs(userPantryRef);
      setData(querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
    } catch (error) {
      console.error("Error fetching documents: ", error);
    }
  };

  const addItem = async () => {
    if (!newItem || !newAmount) {
      alert("Please enter both item name and amount.");
      return;
    }

    if (!user) {
      alert("You must be logged in to add items.");
      return;
    }

    try {
      const userPantryRef = collection(db, "pantry", user.uid, "items"); // User-specific subcollection
      const docRef = await addDoc(userPantryRef, {
        item: newItem,
        amount: newAmount
      });
      setData([...data, { id: docRef.id, item: newItem, amount: newAmount }]);
      setNewItem('');
      setNewAmount('');
    } catch (error) {
      console.error("Error adding document: ", error);
    }
  };

  const deleteItem = async (id) => {
    if (!user) {
      alert("You must be logged in to delete items.");
      return;
    }

    try {
      const itemDocRef = doc(db, "pantry", user.uid, "items", id); // Reference to the specific user's item
      await deleteDoc(itemDocRef);
      setData(data.filter(item => item.id !== id));
    } catch (error) {
      console.error("Error deleting document: ", error);
    }
  };

  const handleLogout = async () => {
    try {
      await auth.signOut();
    } catch (error) {
      console.error("Error signing out: ", error);
    }
  };

  return (
    <ThemeProvider theme={theme}>
      <Head>
        <title>PantryRaid Co - Pantry Tracker</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box
        sx={{
          display: 'flex',
          backgroundImage: 'url(/background.jpg)',
          backgroundSize: 'cover',
          backgroundPosition: 'center',
          height: '100vh',
          width: '100vw',
          position: 'fixed',
          zIndex: -1,
        }}
      />

      <AppBar position="fixed" color="secondary">
        <Toolbar>
          <img src="cart.png" alt="PantryRaid Co Logo" style={{ marginRight: 10, height: 30 }} />
          <Link href="/">
            <Typography variant="h6" component="div" color="white" fontFamily="Bubblegum Sans" sx={{ flexGrow: 1 }}>
              PantryRaid Co
            </Typography>
          </Link>
          <Box sx={{ flexGrow: 1 }} />
            <Link href="/">
              <Button variant="contained" color="primary" sx={{ ml: 2, color: 'white' }} onClick={handleLogout}>
                Logout
              </Button>
            </Link>
        </Toolbar>
      </AppBar>

      <main>
        <Container maxWidth="md">
          <Box
            sx={{
              display: 'flex',
              flexDirection: 'column',
              justifyContent: 'center',
              alignItems: 'center',
              textAlign: 'center',
              height: '100vh',
            }}
          >
            <Box
              sx={{
                width: '90%',
                height: '80%',
                margin: '50px 0 0 0',
                backgroundColor: '#dd885090',
                padding: '20px',
              }}
            >
              <Typography
                variant="h2"
                color="primary"
                component="h2"
                mb={2}
                fontFamily="Pacifico"
                sx={{
                  textDecoration: 'underline',
                  marginTop: 1,
                }}
              >
                Inventory
              </Typography>
              {user ? (
                <Box sx={{ marginTop: 1 }}>
                  <TextField
                    label="Item"
                    variant="outlined"
                    value={newItem}
                    onChange={(e) => setNewItem(e.target.value)}
                    sx={{ marginRight: 2 }}
                  />
                  <TextField
                    label="Amount"
                    variant="outlined"
                    value={newAmount}
                    onChange={(e) => setNewAmount(e.target.value)}
                  />
                  <Button variant="contained" color="primary" onClick={addItem} sx={{ marginLeft: 2, marginTop: 1 }}>
                    Add Item
                  </Button>
                  <Box 
                    sx={{ 
                      maxHeight: 420,
                      overflowY: 'auto', 
                      border: '1px solid #ccc', 
                      borderRadius: 1,
                      marginTop: 3 
                    }}
                  >
                    <List>
                      {data.map((item, index) => (
                        <React.Fragment key={item.id}>
                          <ListItem>
                            <ListItemText
                              primary={<Typography variant="h6" color='white'>
                                {item.item}
                              </Typography>}
                              secondary={<Typography variant="body2" color="textSecondary">
                                Amount: {item.amount}
                              </Typography>}
                            />
                            <Button
                              variant="contained"
                              color="error"
                              onClick={() => deleteItem(item.id)}
                              sx={{ marginLeft: 0 }}
                            >
                              Delete
                            </Button>
                          </ListItem>
                          {index < data.length - 1 && <Divider />}
                        </React.Fragment>
                      ))}
                    </List>
                  </Box>
                </Box>
              ) : (
                <Typography variant="h6" color="white">
                  Please log in to view and manage the inventory.
                </Typography>
              )}
            </Box>
          </Box>
        </Container>
      </main>
    </ThemeProvider>
  );
}

export default Inventory;
